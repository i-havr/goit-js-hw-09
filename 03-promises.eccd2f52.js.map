{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEAD,EAAAE,OAAOC,KAAK,CACVC,MAAO,QACPC,SAAU,YACVC,aAAa,IAGfN,EAAAE,OAAOK,MAAM,CACXC,SAAS,IAGX,IAAMC,EAAO,CACXC,aAAcC,SAASC,cAAc,kBACrCC,UAAWF,SAASC,cAAc,UAG9BE,EAAW,GAwBjB,SAASC,EAAcV,EAAUW,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEb,WAAUW,UAEpBG,EAAO,CAAEd,WAAUW,S,GAEpBA,E,IAIP,SAASQ,EAAcC,G,IAAEpB,EAAFoB,EAAEpB,SAAUW,EAAZS,EAAYT,MACjChB,EAAAE,OAAOwB,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANX,EAAM,M,CAG/D,SAASY,EAAcH,G,IAAEpB,EAAFoB,EAAEpB,SAAUW,EAAZS,EAAYT,MACjChB,EAAAE,OAAO2B,QAAQ,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANX,EAAM,M,CAzC5DP,EAAKI,UAAUiB,iBAAiB,UAQhC,SAAsBC,GACpBA,EAAMC,iBAMN,IAJA,IAAMC,EAAaC,OAAOpB,EAASE,OAC7BmB,EAAOD,OAAOpB,EAASqB,MACvBC,EAASF,OAAOpB,EAASsB,QAEtBC,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CAGnCtB,EAAcsB,EAFAJ,EAAaE,GAAQE,EAAI,IAEfC,KAAKd,GAAee,MAAMX,E,KAjBtDnB,EAAKI,UAAUiB,iBAAiB,SAEhC,SAAqBC,GAEnB,OADAjB,EAASiB,EAAMS,OAAOC,MAAQV,EAAMS,OAAOE,MACpC5B,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nNotify.init({\n  width: '250px',\n  position: 'right-top',\n  closeButton: false,\n});\n\nNotify.merge({\n  useIcon: false,\n});\n\nconst refs = {\n  submitBtnRef: document.querySelector('.form > button'),\n  formInput: document.querySelector('.form'),\n};\n\nconst formData = {};\n\nrefs.formInput.addEventListener('submit', onFormSubmit);\nrefs.formInput.addEventListener('input', onFormInput);\n\nfunction onFormInput(event) {\n  formData[event.target.name] = event.target.value;\n  return formData;\n}\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  const firstDelay = Number(formData.delay);\n  const step = Number(formData.step);\n  const amount = Number(formData.amount);\n\n  for (let i = 1; i <= amount; i += 1) {\n    const delay = firstDelay + step * (i - 1);\n\n    createPromise(i, delay).then(notifySuccess).catch(notifyFailure);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction notifySuccess({ position, delay }) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction notifyFailure({ position, delay }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n"],"names":["$h6c0i","parcelRequire","Notify","init","width","position","closeButton","merge","useIcon","$ce04d3a99e08e73b$var$refs","submitBtnRef","document","querySelector","formInput","$ce04d3a99e08e73b$var$formData","$ce04d3a99e08e73b$var$createPromise","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$notifySuccess","param","success","concat","$ce04d3a99e08e73b$var$notifyFailure","failure","addEventListener","event","preventDefault","firstDelay","Number","step","amount","i","then","catch","target","name","value"],"version":3,"file":"03-promises.eccd2f52.js.map"}